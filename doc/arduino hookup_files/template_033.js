(function(){
Template.__checkName("download_serial_api_13");
Template["download_serial_api_13"] = new Template("Template.download_serial_api_13", (function() {
  var view = this;
  return HTML.DIV({
    "class": "col-md-12"
  }, HTML.Raw("\n		<h1>MySensors Serial Protocol (1.3)</h1>\n		"), HTML.DIV({
    "class": "well"
  }, "\n\n		", HTML.Raw('<p>The serial protocol used between the Gateway and the Controller is a simple semicolon separated list of values. The last part of each "command" is the payload. All commands ends with a newline.</p>'), "\n\n		", HTML.Raw("<p>The serial commands has the following format:</p>"), "\n\n		", HTML.Raw('<p><div class="scommand">radioId<strong>;</strong>childId<strong>;</strong>messageType<strong>;</strong>subType<strong>;</strong>payload<strong>\\n</strong></div></p>'), "\n\n		", HTML.Raw("<h3>Message Structure Elements</h3>"), "\n\n		", HTML.TABLE({
    "class": "table table-curved"
  }, "\n			", HTML.TR(HTML.TH("Message Part"), HTML.TH("Comment")), "\n			", HTML.TR(HTML.TH("radioId"), HTML.TD("The unique id of the node that sends or should receive the message")), "\n			", HTML.TR(HTML.TH("childId"), HTML.TD("Each node can have several sensors attached. This is the sub-sensor id that uniquely identifies one attached sensor")), "\n			", HTML.TR(HTML.TH("messageType"), HTML.TD("Type of message sent - See table below")), "\n			", HTML.TR(HTML.TH("subType"), HTML.TD("Depending on messageTypem this fields has different meaning. See tables below")), "\n			", HTML.TR(HTML.TH("payload"), HTML.TD("The payload holds the message coming in from sensors or instruction going out to actuators.")), "\n		"), "\n\n		", HTML.Raw('<div class="alert alert-info"><i class="fa fa-exclamation-triangle"></i> <strong>The maximum payload size is 25 bytes!</strong>\n		<p>The NRF24L01+ has a maximum of 32 bytes. The MySensors library (version 1.3) uses 7 bytes for the message header.</p></div>'), "\n\n		", HTML.Raw("<h3>Message Types</h3>"), "\n\n		", HTML.TABLE({
    "class": "table table-curved"
  }, "\n			", HTML.TR(HTML.TH("Type"), HTML.TH("Protocol Value"), HTML.TH("Comment")), "\n			", HTML.TR(HTML.TH("Presentation"), HTML.TD("0"), HTML.TD("Sent by senors when they present which sensors they have attached. This is usually done when they start up.")), "\n			", HTML.TR(HTML.TH("Set Variable"), HTML.TD("1"), HTML.TD("This message is sent from or to a sensor when a sensor value should be updated")), "\n			", HTML.TR(HTML.TH("Request Variable"), HTML.TD("2"), HTML.TD("Requests a variable value (usually from an actuator to gateway).")), "\n			", HTML.TR(HTML.TH("Variable Acknowledgments"), HTML.TD("3"), HTML.TD("When controller/gateway sends out a updated variable value (e.g. relay) the actuator replies with one of these messages.")), "\n			", HTML.TR(HTML.TH("Internal"), HTML.TD("4"), HTML.TD("This is a special internal message. See table below for the details")), "\n\n		"), "\n		", HTML.Raw('<div id="sensor-types"></div>'), "\n		", HTML.Raw("<h3>Presentation Message - Sensor Types</h3>"), "\n		", HTML.Raw("<p>When a presentation message is sent, <strong>subType</strong> can be set to one the following sensor types.</p>"), "\n		", HTML.TABLE({
    "class": "table table-curved"
  }, "\n			", HTML.TR(HTML.TH("Type"), HTML.TH("Protocol Value"), HTML.TH("Comment")), "\n			", HTML.TR(HTML.TH("S_DOOR"), HTML.TD("0"), HTML.TD("Door and window sensors")), "\n			", HTML.TR(HTML.TH("S_MOTION"), HTML.TD("1"), HTML.TD("Motion sensors")), "\n			", HTML.TR(HTML.TH("S_SMOKE"), HTML.TD("2"), HTML.TD("Smoke sensor")), "\n			", HTML.TR(HTML.TH("S_LIGHT"), HTML.TD("3"), HTML.TD("Light Actuator (on/off)")), "\n			", HTML.TR(HTML.TH("S_DIMMER"), HTML.TD("4"), HTML.TD("Dimmable device of some kind")), "\n			", HTML.TR(HTML.TH("S_COVER"), HTML.TD("5"), HTML.TD("Window covers or shades")), "\n			", HTML.TR(HTML.TH("S_TEMP"), HTML.TD("6"), HTML.TD("Temperature sensor")), "\n			", HTML.TR(HTML.TH("S_HUM"), HTML.TD("7"), HTML.TD("Humidity sensor")), "\n			", HTML.TR(HTML.TH("S_BARO"), HTML.TD("8"), HTML.TD("Barometer sensor (Pressure)")), "\n			", HTML.TR(HTML.TH("S_WIND"), HTML.TD("9"), HTML.TD("Wind sensor")), "\n			", HTML.TR(HTML.TH("S_RAIN"), HTML.TD("10"), HTML.TD("Rain sensor")), "\n			", HTML.TR(HTML.TH("S_UV"), HTML.TD("11"), HTML.TD("UV sensor")), "\n			", HTML.TR(HTML.TH("S_WEIGHT"), HTML.TD("12"), HTML.TD("Weight sensor for scales etc.")), "\n			", HTML.TR(HTML.TH("S_POWER"), HTML.TD("13"), HTML.TD("Power measuring device, like power meters")), "\n			", HTML.TR(HTML.TH("S_HEATER"), HTML.TD("14"), HTML.TD("Heater device")), "\n			", HTML.TR(HTML.TH("S_DISTANCE"), HTML.TD("15"), HTML.TD("Distance sensor")), "\n			", HTML.TR(HTML.TH("S_LIGHT_LEVEL"), HTML.TD("16"), HTML.TD("Light sensor")), "\n			", HTML.TR(HTML.TH("S_ARDUINO_NODE"), HTML.TD("17"), HTML.TD("Arduino node device")), "\n			", HTML.TR(HTML.TH("S_ARDUINO_RELAY"), HTML.TD("18"), HTML.TD("Arduino relaying node device")), "\n			", HTML.TR(HTML.TH("S_LOCK"), HTML.TD("19"), HTML.TD("Lock device")), "\n			", HTML.TR(HTML.TH("S_IR"), HTML.TD("20"), HTML.TD("Ir sender/receiver device")), "\n			", HTML.TR(HTML.TH("S_WATER"), HTML.TD("21"), HTML.TD("Water meter")), "\n		"), "\n\n		", HTML.Raw('<div id="variable-types"></div>'), "\n		", HTML.Raw("<h3>Variable Message - Variable Types</h3>"), "\n		", HTML.Raw("<p>When a set, request or ack variable message is being sent, the <strong>subType</strong> can be set to one the following variable types.</p>"), "\n		", HTML.TABLE({
    "class": "table table-curved"
  }, "\n			", HTML.TR(HTML.TH("Type"), HTML.TH("Protocol Value"), HTML.TH("Comment")), "\n			", HTML.TR(HTML.TH("V_TEMP"), HTML.TD("0"), HTML.TD("Temperature ")), "\n			", HTML.TR(HTML.TH("V_HUM"), HTML.TD("1"), HTML.TD("Humidity")), "\n			", HTML.TR(HTML.TH("V_LIGHT"), HTML.TD("2"), HTML.TD("Light status. 0=off 1=on")), "\n			", HTML.TR(HTML.TH("V_DIMMER"), HTML.TD("3"), HTML.TD("Dimmer value. 0-100%")), "\n			", HTML.TR(HTML.TH("V_PRESSURE"), HTML.TD("4"), HTML.TD("Atmospheric Pressure")), "\n			", HTML.TR(HTML.TH("V_FORECAST"), HTML.TD("5"), HTML.TD('Whether forecast. One of "stable", "sunny", "cloudy", "unstable", "thunderstorm" or "unknown"')), "\n			", HTML.TR(HTML.TH("V_RAIN"), HTML.TD("6"), HTML.TD("Amount of rain")), "\n			", HTML.TR(HTML.TH("V_RAINRATE"), HTML.TD("7"), HTML.TD("Rate of rain")), "\n			", HTML.TR(HTML.TH("V_WIND"), HTML.TD("8"), HTML.TD("Windspeed")), "\n			", HTML.TR(HTML.TH("V_GUST"), HTML.TD("9"), HTML.TD("Gust")), "\n			", HTML.TR(HTML.TH("V_DIRECTION"), HTML.TD("10"), HTML.TD("Wind direction")), "\n			", HTML.TR(HTML.TH("V_UV"), HTML.TD("11"), HTML.TD("UV light level")), "\n			", HTML.TR(HTML.TH("V_WEIGHT"), HTML.TD("12"), HTML.TD("Weight (for scales etc)")), "\n			", HTML.TR(HTML.TH("V_DISTANCE"), HTML.TD("13"), HTML.TD("Distance")), "\n			", HTML.TR(HTML.TH("V_IMPEDANCE"), HTML.TD("14"), HTML.TD("Impedance value")), "\n			", HTML.TR(HTML.TH("V_ARMED"), HTML.TD("15"), HTML.TD("Armed status of a security sensor. 1=Armed, 0=Bypassed")), "\n			", HTML.TR(HTML.TH("V_TRIPPED"), HTML.TD("16"), HTML.TD("Tripped status of a security sensor. 1=Tripped, 0=Untripped")), "\n			", HTML.TR(HTML.TH("V_WATT"), HTML.TD("17"), HTML.TD("Watt value for power meters")), "\n			", HTML.TR(HTML.TH("V_KWH"), HTML.TD("18"), HTML.TD("Accumulated number of KWH for a power meter")), "\n			", HTML.TR(HTML.TH("V_SCENE_ON"), HTML.TD("19"), HTML.TD("Turn on a scene")), "\n			", HTML.TR(HTML.TH("V_SCENE_OFF"), HTML.TD("20"), HTML.TD("Turn of a scene")), "\n			", HTML.TR(HTML.TH("V_HEATER"), HTML.TD("21"), HTML.TD('Mode of header. One of "Off", "HeatOn", "CoolOn", or "AutoChangeOver"')), "\n			", HTML.TR(HTML.TH("V_HEATER_SW"), HTML.TD("22"), HTML.TD("Heater switch power. 1=On, 0=Off")), "\n			", HTML.TR(HTML.TH("V_LIGHT_LEVEL"), HTML.TD("23"), HTML.TD("Light level. 0-100%")), "\n			", HTML.TR(HTML.TH("V_VAR1"), HTML.TD("24"), HTML.TD("Custom value")), "\n			", HTML.TR(HTML.TH("V_VAR2"), HTML.TD("25"), HTML.TD("Custom value")), "\n			", HTML.TR(HTML.TH("V_VAR3"), HTML.TD("26"), HTML.TD("Custom value")), "\n			", HTML.TR(HTML.TH("V_VAR4"), HTML.TD("27"), HTML.TD("Custom value")), "\n			", HTML.TR(HTML.TH("V_VAR5"), HTML.TD("28"), HTML.TD("Custom value")), "\n			", HTML.TR(HTML.TH("V_UP"), HTML.TD("29"), HTML.TD("Window covering. Up.")), "\n			", HTML.TR(HTML.TH("V_DOWN"), HTML.TD("30"), HTML.TD("Window covering. Down.")), "\n			", HTML.TR(HTML.TH("V_STOP"), HTML.TD("31"), HTML.TD("Window covering. Stop.")), "\n			", HTML.TR(HTML.TH("V_IR_SEND"), HTML.TD("32"), HTML.TD("Send out an IR-command")), "\n			", HTML.TR(HTML.TH("V_IR_RECEIVE"), HTML.TD("33"), HTML.TD("This message contains a received IR-command")), "\n			", HTML.TR(HTML.TH("V_FLOW"), HTML.TD("34"), HTML.TD("Flow of water (in meter)")), "\n			", HTML.TR(HTML.TH("V_VOLUME"), HTML.TD("35"), HTML.TD("Water volume")), "\n			", HTML.TR(HTML.TH("V_LOCK_STATUS"), HTML.TD("36"), HTML.TD("Set or get lock status. 1=Locked, 0=Unlocked")), "\n		"), "\n\n\n\n\n		", HTML.Raw("<h3>Internal Messages</h3>"), "\n		", HTML.Raw("<p>The internal messages are used for different tasks in the communication between sensors, the gateway to controller and between sensors and the gateway.</p>"), "\n\n		", HTML.Raw("<p>When an internal messages is sent, <strong>subType</strong> can be set to one the following sensor types.</p>"), "\n		", HTML.TABLE({
    "class": "table table-curved"
  }, "\n			", HTML.TR(HTML.TH("Type"), HTML.TH("Protocol Value"), HTML.TH("Comment")), "\n\n			", HTML.TR(HTML.TH("I_BATTERY_LEVEL"), HTML.TD("0"), HTML.TD("Use this to report the battery level (in percent 0-100).")), "\n			", HTML.TR(HTML.TH("I_BATTERY_DATE ", HTML.SPAN({
    style: "color:red"
  }, "(Deprecated)")), HTML.TD("1"), HTML.TD("Used by the Controller plugin to keep track of the last battery date. Not used over the air.")), "\n			", HTML.TR(HTML.TH("I_LAST_TRIP ", HTML.SPAN({
    style: "color:red"
  }, "(Deprecated)")), HTML.TD("2"), HTML.TD("Used by the Controller plugin to keep track of last trip value. Not used over the air.")), "\n			", HTML.TR(HTML.TH("I_TIME"), HTML.TD("3"), HTML.TD("Sensors can request the current time from the Controller using this message. The time will be reported as the seconds since 1970")), "\n			", HTML.TR(HTML.TH("I_VERSION"), HTML.TD("4"), HTML.TD("Sensors report their library version at startup using this message type")), "\n			", HTML.TR(HTML.TH("I_REQUEST_ID"), HTML.TD("5"), HTML.TD("Use this to request a unique radioId from the Controller.")), "\n			", HTML.TR(HTML.TH("I_INCLUSION_MODE"), HTML.TD("6"), HTML.TD("Start/stop inclusion mode of the Controller (1=start, 0=stop).")), "\n			", HTML.TR(HTML.TH("I_RELAY_NODE"), HTML.TD("7"), HTML.TD("When a sensor starts up, it reports it's current relay node (parent node).")), "\n			", HTML.TR(HTML.TH("I_LAST_UPDATE ", HTML.SPAN({
    style: "color:red"
  }, "(Deprecated)")), HTML.TD("8"), HTML.TD("Used by the Controller plugin to keep track of last update date. Not used over the air.")), "\n			", HTML.TR(HTML.TH("I_PING"), HTML.TD("9"), HTML.TD("When a sensor wakes up for the first time, it sends a PING-message to find its neighbors.")), "\n			", HTML.TR(HTML.TH("I_PING_ACK"), HTML.TD("10"), HTML.TD("This is the reply message sent by relaying nodes and the gateway in reply to PING messages.")), "\n			", HTML.TR(HTML.TH("I_LOG_MESSAGE"), HTML.TD("11"), HTML.TD("Sent by the gateway to the Controller to trace-log a message")), "\n			", HTML.TR(HTML.TH("I_CHILDREN"), HTML.TD("12"), HTML.TD("A message that can be used to transfer child sensors (from EEPROM routing table) of a relaying node.")), "\n			", HTML.TR(HTML.TH("I_UNIT"), HTML.TD("13"), HTML.TD('Sensors can request the units of measure that it should use when reporting sensor data. Payload can be  "I" for imperial (Fahrenheit, inch, ...) or "M" for Metric (Celsius, meter, ...)')), "\n			", HTML.TR(HTML.TH("I_SKETCH_NAME"), HTML.TD("14"), HTML.TD("Optional sketch name that can be used to identify sensor in the Controller GUI")), "\n			", HTML.TR(HTML.TH("I_SKETCH_VERSION"), HTML.TD("15"), HTML.TD("Optional sketch version that can be reported to keep track of the version of sensor in the Controller GUI.")), "\n		"), "\n\n\n		", HTML.Raw("<h3>Serial Communication Examples</h3>"), "\n		", HTML.Raw("<p>Here are a few example of the serial protocol (from the gateways perspective).</p>"), "\n\n		", HTML.Raw("<p><strong>Received message via the radio from one of the sensors:</strong> Incoming light-sensor presentation message from child sensor 6 of a sensor-node with radioId 12. The payload is the sensors library version (1.3). Pass this over the serial interface to the Controller. </p>"), "\n		", HTML.Raw('<p><div class="scommand">12;6;0;3;1.3\\n</div></p>'), "\n\n\n		", HTML.Raw("<p><strong>Received message via the radio from one of the sensors:</strong> Incoming temperature message from child sensor 6 of a sensor-node with radioId 12.  Pass this over the serial interface to controller.</p>"), "\n		", HTML.Raw('<p><div class="scommand">12;6;1;0;36.5\\n</div></p>'), "\n\n		", HTML.Raw("<p><strong>Received command via the serial interface from the Controller:</strong> Outgoing message to radio node 13. Set light variable to 1 (turn on relay) of child sensor 7. Send it out via the radio.</p>"), "\n		", HTML.Raw('<p><div class="scommand">13;7;1;2;1\\n</div></p>'), "\n\n\n		"), "\n	");
}));

Template.__checkName("download_sensor_api_13");
Template["download_sensor_api_13"] = new Template("Template.download_sensor_api_13", (function() {
  var view = this;
  return HTML.DIV({
    "class": "col-md-12"
  }, HTML.Raw("\n		<h1>MySensors Arduino Library (v1.3)</h1>\n		"), HTML.DIV({
    "class": "well"
  }, "\n		", HTML.Raw('<a href="/api/api.png" data-lightbox="image-finding" title="API ladies"><img src="/api/api.png" style="float:right;width:250px;padding-left:20px"></a>'), "\n\n		", HTML.Raw("<p>The MySensors C++ API consists of three classes; <strong>Sensor</strong>, <strong>Relay</strong> and <strong>Gateway</strong>. We will start with a simple Sensor example to get you started.</p>"), "\n\n		", HTML.Raw("<h2>Sensor Nodes</h2>"), "\n\n		", HTML.Raw("<p>To create the Arduino program (or sketch) for a sensor you only need to write few lines of code:</p>"), "\n\n\n		", HTML.Raw('<pre><code class="cpp">#include &lt;Sensor.h>\n#include &lt;SPI.h>\n#include &lt;EEPROM.h>\n#include &lt;RF24.h>\n\n#define ID 1\n#define OPEN 1\n#define CLOSE 0\nSensor gw;\n\nvoid setup()\n{\n	gw.begin();\n	gw.sendSensorPresentation(ID, S_DOOR);\n}\n\nvoid loop()\n{\n	gw.sendVariable(ID, V_TRIPPED, OPEN);\n	delay(10000); // Wait 10 seconds\n}</code></pre>'), "\n\n		", HTML.Raw("<h3>Ok! So, what is happening here?</h3>"), "\n\n		", HTML.Raw("<h4>Initialization</h4>"), "\n\n		", HTML.Raw("<p>The MySensors library is started when you call <strong>gw.begin(&lt;OPTIONAL_RADIO_ID>)</strong>.</p>"), "\n		", HTML.Raw("<p><strong>OPTIONAL_RADIO_ID</strong>: If you want, you can supply a unique static radio id here. The id must be unique in your radio network. If you skip this argument the node will try to fetch an id from the Controller.</p>"), "\n		", HTML.Raw("<p>Once an id has been received from the Controller it will be saved in the Arduino's static EEPROM memory. The id is automatically read from EEPROM each time the Sensor node resets or powers-up.</p>"), "\n		", HTML.Raw("<p>The initialization determines the shortest network path to the gateway.</p>"), "\n\n		", HTML.Raw("<h3>Presentation</h3>"), "\n		", HTML.Raw("<p>Your sensor must first present itself to anyone listening (normally the Controller). This is done by calling <strong>gw.sendSensorPresentation(&lt;CHILD_ID>,&lt;SENSOR_TYPE>)</strong> </p>"), "\n		", HTML.Raw("<p>The presentation prepares the Controller for the data the sensor report to the gateway and Controller.</p>"), "\n\n		", HTML.Raw('<p><strong>SENSOR_TYPE</strong>: The list of supported sensor types is constantly growing.  For a more in-depth sensor type explanation, refer to the <a href="#sensor-types">sensor type tables</a> below. </p>'), "\n\n		", HTML.Raw('<pre><code class="cpp">typedef enum {\n	S_DOOR, S_MOTION, S_SMOKE, S_LIGHT, S_DIMMER, S_COVER, S_TEMP, S_HUM,\n	S_BARO, S_WIND, S_RAIN, S_UV, S_WEIGHT, S_POWER, S_HEATER, S_DISTANCE,\n	S_LIGHT_LEVEL, S_ARDUINO_NODE, S_ARDUINO_RELAY, S_LOCK, S_IR, S_WATER\n} sensor;</code></pre>'), "\n\n		", HTML.Raw("<p><strong>CHILD_ID</strong>: Each radio node can report data for up to 254 different child sensors. You are free to choose the child id yourself. You should avoid using child-id 255 because it is used for things like sending in battery level and other (protocol internal) node specific information. </p>"), "\n\n		", HTML.Raw("<h4>Sending Data</h4>"), "\n		", HTML.Raw("<p>In the loop() method of the example you might have noticed a call to <strong>gw.sendVariable(&lt;CHILD_ID>, &lt;VARIABLE_TYPE>, &lt;PAYLOAD>)</strong>. This is where the sensor data is actually transferred to the Controller.</p>"), "\n\n		", HTML.Raw("<p><strong>CHILD_ID</strong>: This is where you specify the child sensor that is reporting the data. In the example we only have one child sensor so it's a no-brainer which number to pick. </p>"), "\n\n		", HTML.Raw('<p><strong>VARIABLE_TYPE</strong>: When sending data to the Controller you must specify what you actually report. We call this the <strong>variable type</strong>. Often the sensor type and variable type is almost the same but there are a few sensors that report more than one variable type-value. For example; Power meters often report both the accumulated KWH and current WATTAGE. The list of variable types is also growing. You can read the <a href="#variable-types">variable type table</a> below for more details. </p>'), "\n\n\n		", HTML.Raw('<pre><code class="cpp">typedef enum {\n	V_TEMP,V_HUM, V_LIGHT, V_DIMMER, V_PRESSURE, V_FORECAST, V_RAIN,\n	V_RAINRATE, V_WIND, V_GUST, V_DIRECTION, V_UV, V_WEIGHT, V_DISTANCE,\n	V_IMPEDANCE, V_ARMED, V_TRIPPED, V_WATT, V_KWH, V_SCENE_ON, V_SCENE_OFF,\n	V_HEATER, V_HEATER_SW, V_LIGHT_LEVEL, V_VAR1, V_VAR2, V_VAR3, V_VAR4, V_VAR5,\n	V_UP, V_DOWN, V_STOP, V_IR_SEND, V_IR_RECEIVE, V_FLOW, V_VOLUME, V_LOCK_STATUS\n} variableType;</code></pre>'), "\n\n\n		", HTML.Raw("<p>You will always find the most recent list of supported sensor and variables-types in Sensor.h on GitHub:</p>"), "\n		", Blaze._TemplateWith(function() {
    return {
      repo: Spacebars.call("Arduino"),
      path: Spacebars.call("libraries/MySensors"),
      name: Spacebars.call("Sensor.h")
    };
  }, function() {
    return Spacebars.include(view.lookupTemplate("dl"));
  }), "\n\n\n		", HTML.Raw("<p>The above example was intentionally simplistic and pointless because it reports the same value every 10 seconds. However, it should help you understand how to write a sensor sketch. There are plenty of more advanced examples here on MySensors if you enjoy copy-paste programming ;).</p>"), "\n\n\n\n		", HTML.Raw('<h2 id="relaying-nodes">Relaying Nodes</h2>'), "\n\n		", HTML.Raw('<p>You will normally just use the <strong>Sensor</strong> class. But sometimes if you live in a <a href="http://en.wikipedia.org/wiki/Faraday_cage">Faraday\'s cage</a> or a mansion you might need a few relaying nodes to cover the full area. This is when the <strong>Relay</strong>  class comes in handy. </p>'), "\n\n		", HTML.Raw("<p>The difference between the two variants is that the Relay-class has the ability to repeat and route messages from other radio nodes to will help messages sent from your farthest nodes to find their way to the gateway and Controller.</p>"), "\n\n		", HTML.Raw("<p>Messages can even pass several relaying nodes on their way to the gateway.</p>"), "\n\n		", HTML.Raw("<p>You can easily convert a normal sensor node to a relaying node by simply using the Relay constructor instead of the Sensor constructor.</p>"), "\n\n		", HTML.Raw('<pre><code class="cpp">// Remove this Sensor constructor\nSensor gw;\n\n// And add this Relay constructor\nRelay gw;</code></pre>'), "\n\n		", HTML.Raw('<div class="alert alert-info"><i class="fa fa-exclamation-triangle"></i><strong> Do not implement sleep mode on Relaying nodes!</strong>\n		<p>They must be awake at all time to reliably listen for messages that needs to be routed to their surrounding network topology.</p></div>'), "\n\n		All the routing-magic is performed in the ", HTML.Raw("<strong>messageAvailable()</strong>"), " method so the sketch loop() method must repeatedly invoke the ", HTML.Raw("<strong>messageAvailable()</strong>"), " method, like this:\n\n		", HTML.Raw('<pre><code class="cpp">void loop()\n{\n	// By calling this regularly you route messages in the background\n	if (gw.messageAvailable()) {\n		// Handle incoming message addressed for this node here...\n	}\n}</code></pre>'), "\n\n		", HTML.Raw("<p>Here is a full example of a relaying node: </p>"), "\n		", Blaze._TemplateWith(function() {
    return {
      repo: Spacebars.call("Arduino"),
      path: Spacebars.call("libraries/MySensors/examples/RelayingNode"),
      name: Spacebars.call("RelayingNode.ino")
    };
  }, function() {
    return Spacebars.include(view.lookupTemplate("dl"));
  }), "\n\n\n		", HTML.Raw("<h2>Gateway</h2>"), "\n\n		", HTML.Raw('<p>The <strong>Gateway</strong> class has the ability to serialize/deserialize messages that need to be passed along to some other media e.g. Ethernet or serial-USB. This class is only used by the <strong>EthernetGateway</strong> and <strong>SerialGateway</strong> today buy nothing prevents you from creating your own gateway or use the <a href="#serial-protocol">serial protocol</a> to interface some other Controller. </p>'), "\n\n\n\n\n		", HTML.Raw("<h2>The Full API</h2>"), "\n		", HTML.Raw("<p>Ok, you're ready! Here is the full API. </p>"), "\n\n		", HTML.Raw("<h3>Constructors</h3>"), "\n		", HTML.Raw("<p>Creates an instance of the library. You'll have to include the corresponding header file. You can skip the arguments if you want to use the defualt values.</p>"), "\n		", HTML.Raw("<strong>cepin</strong>"), " - The pin attached to RF24 Chip Enable on the RF module (defualt 9)", HTML.Raw("<br>"), "\n		", HTML.Raw("<strong>cspin</strong>"), " - The pin attached to RF24 Chip Select (default 10)", HTML.Raw("<br>"), "\n		", HTML.Raw('<pre><code class="cpp">Sensor(uint8_t cepin = 9, uint8_t cspin = 10);\nRelay (uint8_t cepin = 9, uint8_t cspin = 10);</code></pre>'), "\n\n\n		", HTML.Raw("<h3>Starting up the library</h3>"), "\n		", HTML.Raw("<p>To initialize radio and start the library, you must call <strong>begin()</strong>. Begin initializes the sensor node but you can also configure the sensor node operating parameters manually. </p>"), "\n		", HTML.Raw("<strong>radioId</strong>"), " - The unique id (1-254) for this sensor. Default 255 (auto mode).", HTML.Raw("<br>"), "\n		", HTML.Raw("<strong>paLevel</strong>"), " - Radio PA Level for this sensor. Default RF24_PA_MAX", HTML.Raw("<br>"), "\n		", HTML.Raw("<strong>channel</strong>"), " - Radio channel. Default is channel 76", HTML.Raw("<br>"), "\n		", HTML.Raw("<strong>dataRate</strong>"), " - Radio transmission speed. Default RF24_2MBPS", HTML.Raw("<br>"), "\n\n		", HTML.Raw('<pre><code class="cpp">void begin(uint8_t radioId = AUTO, rf24_pa_dbm_e paLevel = RF24_PA_LEVEL,\nuint8_t channel = RF24_CHANNEL, rf24_datarate_e dataRate = RF24_DATARATE);</code></pre>'), "\n\n\n		", HTML.Raw("<h3>Received Radio Id</h3>"), "\n		", HTML.Raw("<p>When you enable auto mode, the sensor automatically fetches a unique radio (auto mode). You can retrieve the actual radio id received from Controller with this method.</p>"), "\n		", HTML.Raw('<pre><code class="cpp">uint8_t getRadioId();</code></pre>'), "\n\n\n		", HTML.Raw("<h3>Presentation</h3>"), "\n		", HTML.Raw("<p>The sensors must present themselves before they report any sensor data to the gateway.</p>"), "\n\n		", HTML.Raw("<strong>childId</strong>"), " - The unique child id you want to choose for the sensor connected to this Arduino. Range 0-254.", HTML.Raw("<br>"), "\n		", HTML.Raw("<strong>sensorType</strong>"), " - The ", HTML.Raw('<a href="#sensor-type">sensor type</a>'), " you want to create.", HTML.Raw("<br>"), "\n\n		", HTML.Raw('<pre><code class="cpp">void sendSensorPresentation(uint8_t childId, uint8_t sensorType);</code></pre>'), "\n\n		", HTML.Raw("<p>You can also send in some optional meta information for this sensor node.</p>"), "\n		", HTML.Raw("<strong>name</strong>"), " - Some informative name for the sensor. Max 25 characters.", HTML.Raw("<br>"), "\n		", HTML.Raw("<strong>version</strong>"), " - The version of your sensor.", HTML.Raw("<br>"), "\n\n		", HTML.Raw('<pre><code class="cpp">void sendSketchInfo(const char *name, const char *version);\nvoid sendSketchName(const char *name);\nvoid sendSketchVersion(const char *version);</code></pre>'), "\n\n\n		", HTML.Raw("<h3>Sending data to the Controller or other Sensors</h3>"), "\n		", HTML.Raw("<p>You can send data to the controller or some other sensor by using the <strong>sendVariable()</strong> methods. If you supply a float value you must also specify the significant digits to report.</p>"), "\n\n		", HTML.Raw("<strong>radioId</strong>"), " - If you want to send a message to another sensor in the network you can specify its radioId here.", HTML.Raw("<br>"), "\n		", HTML.Raw("<strong>childId</strong>"), " - The child id for the sensor.", HTML.Raw("<br>"), "\n		", HTML.Raw("<strong>variableType</strong>"), " - The ", HTML.Raw('<a href="#variable-types">variable type</a>'), " to update.", HTML.Raw("<br>"), "\n		", HTML.Raw("<strong>value</strong>"), " - The value to send", HTML.Raw("<br>"), "\n		", HTML.Raw("<strong>decimals</strong>"), " - The number of significant digits to send (for double and float values)", HTML.Raw("<br>"), "\n\n		", HTML.Raw('<pre><code class="cpp">void sendVariable(uint8_t childId, uint8_t variableType, const char *value);\nvoid sendVariable(uint8_t childId, uint8_t variableType, double value, int decimals);\nvoid sendVariable(uint8_t childId, uint8_t variableType, unsigned long value);\nvoid sendVariable(uint8_t childId, uint8_t variableType, long value);\nvoid sendVariable(uint8_t childId, uint8_t variableType, unsigned int value);\nvoid sendVariable(uint8_t childId, uint8_t variableType, int value);</code></pre>'), "\n\n		", HTML.Raw("<p><strong>radioId</strong> - If you want to send a message to another sensor in the network use the following methods. The first argument is radio id for the receiving sensor.</p>"), "\n\n		", HTML.Raw('<pre><code class="cpp">void sendVariable(uint8_t radioId, uint8_t childId, uint8_t variableType, const char *value);\nvoid sendVariable(uint8_t radioId, uint8_t childId, uint8_t variableType, double value, int decimals);\nvoid sendVariable(uint8_t radioId, uint8_t childId, uint8_t variableType, unsigned long value);\nvoid sendVariable(uint8_t radioId, uint8_t childId, uint8_t variableType, long value);\nvoid sendVariable(uint8_t radioId, uint8_t childId, uint8_t variableType, unsigned int value);\nvoid sendVariable(uint8_t radioId, uint8_t childId, uint8_t variableType, int value);</code></pre>'), "\n\n		", HTML.Raw('<p><strong>batteryLevel</strong> - If you want a <a href="/build/battery">battery-powered sensor</a> to report its battery level use this method. The value is a percentage (0-100).</p>'), "\n\n		", HTML.Raw('<pre><code class="cpp">void sendBatteryLevel(int batteryLevel);</code></pre>'), "\n\n		", HTML.Raw("<h3>Requesting data from controller or other sensors</h3>"), "\n		", HTML.Raw("<p>If your sensor needs the last reported value or special configuration information from the Controller (or some other sensor) you can use the following methods. </p>"), "\n		", HTML.Raw("<p>They come in two variant. Blocking (get-version) and non-blocking (request-version). To process the reply from the non-blocking version use <strong>messageAvailable()</strong> and <strong>getMessage()</strong>.</p>"), "\n\n		", HTML.Raw("<p>To request the last reported value use <strong>request</strong> or <strong>getStatus</strong>:</p>"), "\n\n		", HTML.Raw('<p><strong>childId</strong> - The child id of the sensor from which you want to request data.<br>\n		<strong>variableType</strong> - The <a href="#variable-types">variable type</a> to fetch.<br></p>'), "\n\n		", HTML.Raw('<pre><code class="cpp">void requestStatus(uint8_t childId, uint8_t variableType);\nchar *getStatus(uint8_t childId, uint8_t variableType);</code></pre>'), "\n\n		", HTML.Raw("<p><strong>radioId</strong> - You can also request a value from another sensor by supplying a radioId as the first argument.</p>"), "\n\n		", HTML.Raw('<pre><code class="cpp">void requestStatus(uint8_t radioId, int8_t childId, uint8_t variableType);\nchar *getStatus(uint8_t radioId, int8_t childId, uint8_t variableType);</code></pre>'), "\n\n		", HTML.Raw("<p>You can also request the current time from the controller. The time is returned as seconds since January 1, 1970 (Epoch). </p>"), "\n\n		", HTML.Raw('<pre><code class="cpp">void requestTime();\nunsigned long getTime();</code></pre>'), "\n\n		", HTML.Raw('<p>Your sensor is responsible for supplying data in the correct units of measure. The Controller can give you a "hint" for which units of measure to report. </p>'), "\n		", HTML.Raw("<p>The request- and isMetricSystem fetches this configuration. </p>"), "\n		", HTML.Raw("<p><strong>Metric</strong> - Celsius, meter, cm, gram, km/h, m/s etc..</p>"), "\n		", HTML.Raw("<p><strong>Imperial</strong> - Fahrenheit, feet, gallon, mph etc...</p>"), "\n\n		", HTML.Raw('<pre><code class="cpp">void requestIsMetricSystem();\nbool isMetricSystem();</code></pre>'), "\n\n\n		", HTML.Raw("<h3>Checking your mailbox</h3>"), "\n		", HTML.Raw("<p>Nodes that expects messages, such as an actuator or relaying node, must check for new messages frequently.  For relaying nodes this is crucial (otherwise messages will be lost on their way to gateway). </p>"), "\n\n		", HTML.Raw("<p>The <strong>messageAvailable()</strong> method will return true if there is a message available for this node. It is non-blocking so your actuator can check this from time to time while performing other functions. </p>"), "\n\n		", HTML.Raw('<div class="alert alert-info"><p><i class="fa fa-exclamation-triangle"></i><strong> This method will also route messages in the background for relaying nodes!</strong></p>\n		<p>See the <a href="#relaying-nodes">Relaying Nodes</a> chapter for more information.</p></div>'), "\n\n		", HTML.Raw("<p>Use <strong>getMessage()</strong> to retrieve the actual message received.</p>"), "\n\n		", HTML.Raw('<pre><code class="cpp">boolean messageAvailable(void);</code></pre>'), "\n\n		", HTML.Raw("<p>The blocking variant of messageAvailable() is waitForMessage(). It just halts program until there is a message for the addressed node. It also returns the actual message upon receipt.</p>"), "\n\n		", HTML.Raw('<pre><code class="cpp">message_s waitForMessage(void);</code></pre>'), "\n\n		", HTML.Raw("<p>To retrieve the last received message use the following method:</p>"), "\n		", HTML.Raw('<pre><code class="cpp">message_s getMessage(void);</code></pre>'), "\n\n\n		", HTML.Raw("<h3>Message structure</h3>"), "\n		", HTML.Raw("<p>This is the full message structure that is transmitted between the sensors and the gateway. This is also what <strong>getMessage()</strong> and <strong>wailForMessage()</strong> returns.</p>"), "\n\n		", HTML.Raw('<pre><code class="cpp">// The message structure\ntypedef struct {\n	uint8_t crc       	 	 : 8;    // 8 bits crc\n	uint8_t version       	 : 3;    // 3 bits protocol version\n	uint8_t binary			 : 1; 	 // 1 bit. Data is binary and should be encoded when sent to sensor net gateway\n	uint8_t from				 : 8;	 // 8 bits. RadioId of sender node\n	uint8_t to      	         : 8;    // 8 bits. RadioId of destination node\n	uint8_t last     	         : 8;    // 8 bits. RadioId of last node this message passed\n	uint8_t childId            : 8;	 // 1 byte. Up to MAX_CHILD_DEVICES child sensors per radioId\n	uint8_t messageType        : 4;    // 4 bits. Type of message. See messageType\n\n	uint8_t type               : 8;	 // 8 bits. variableType or deviceType depending on messageType\n} header_s;\n\ntypedef struct {\n	header_s header;\n	char data[MAX_MESSAGE_LENGTH - sizeof(header_s) + 1];  // Each message can transfer a payload. Add one extra byte for \\0\n} message_s;</code></pre>'), "\n\n\n		", HTML.Raw("<h2>Buying guide</h2>"), "\n		", Blaze._TemplateWith(function() {
    return {
      category: Spacebars.call("s_books")
    };
  }, function() {
    return Spacebars.include(view.lookupTemplate("shop"));
  }), "\n		"), "\n	");
}));

}).call(this);
