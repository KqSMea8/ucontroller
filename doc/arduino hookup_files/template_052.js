(function(){
Template.__checkName("download_serial_api_15");
Template["download_serial_api_15"] = new Template("Template.download_serial_api_15", (function() {
  var view = this;
  return HTML.DIV({
    "class": "col-md-12"
  }, HTML.Raw("\n		<h1>MySensors Serial Protocol (1.5)</h1>\n		"), HTML.DIV({
    "class": "well"
  }, "\n\n		", HTML.Raw('<p><strong>Older Versions: </strong> <a class="btn btn-xs btn-primary" href="/download/serial_api_14" title="1.4"><span class="glyphicon glyphicon-chevron-right"></span> 1.4</a> | <a class="btn btn-xs btn-primary" href="/download/serial_api_13" title="1.3"><span class="glyphicon glyphicon-chevron-right"></span> 1.3</a></p>'), "\n\n		", HTML.Raw('<p>The serial protocol used between the Gateway and the Controller is a simple semicolon separated list of values. The last part of each "command" is the payload. All commands ends with a newline. The serial commands has the following format:</p>'), "\n\n		", HTML.Raw('<p class="lg">\n		<strong><div class="badge lg">node-id</div><span class="lg">;</span><div class="badge lg">child-sensor-id</div><span class="lg">;</span><div class="badge lg">message-type</div><span class="lg">;</span><div class="badge lg">ack</div><span class="lg">;</span><div class="badge lg">sub-type</div><span class="lg">;</span><div class="badge lg">payload</div><span class="lg">\\n</span></strong>\n		</p>'), "\n\n		", HTML.Raw("<h2>Message Structure Elements</h2>"), "\n\n		", HTML.TABLE({
    "class": "table api-table"
  }, "\n			", HTML.TR(HTML.TH({
    "class": "pull-right"
  }, "Message Part"), HTML.TH("Comment")), "\n			", HTML.TR(HTML.TH(HTML.DIV({
    "class": "badge pull-right"
  }, "node-id")), HTML.TD("The unique id of the node that sends or should receive the message (address)")), "\n			", HTML.TR(HTML.TH(HTML.DIV({
    "class": "badge pull-right"
  }, "child-sensor-id")), HTML.TD("Each node can have several sensors attached. This is the child-sensor-id that uniquely identifies one attached sensor")), "\n			", HTML.TR(HTML.TH(HTML.DIV({
    "class": "badge pull-right"
  }, "message-type")), HTML.TD("Type of message sent - See table below")), "\n			", HTML.TR(HTML.TH(HTML.DIV({
    "class": "badge pull-right"
  }, "ack")), HTML.TD("The ack parameter has the following meaning:", HTML.BR(), "\nOutgoing: 0 = unacknowledged message, 1 = request ack from destination node", HTML.BR(), "\nIncoming: 0 = normal message, 1 = this is an ack message")), "\n\n			", HTML.TR(HTML.TH(HTML.DIV({
    "class": "badge pull-right"
  }, "sub-type")), HTML.TD("Depending on messageType this field has different meaning. See tables below")), "\n			", HTML.TR(HTML.TH(HTML.DIV({
    "class": "badge pull-right"
  }, "payload")), HTML.TD("The payload holds the message coming in from sensors or instruction going out to actuators.")), "\n		"), "\n\n		", HTML.Raw('<div class="alert alert-info"><i class="fa fa-exclamation-triangle"></i> <strong>The maximum payload size is 25 bytes!</strong>\n		<p>The NRF24L01+ has a maximum of 32 bytes. The MySensors library (version 1.5) uses 7 bytes for the message header.</p></div>'), "\n\n		", HTML.Raw('<p><div class="badge" style="font-size:150%">message-type</div></p>'), "\n\n		", HTML.TABLE({
    "class": "table api-table"
  }, "\n			", HTML.TR(HTML.TH({
    "class": "pull-right"
  }, "Type"), HTML.TH("Value"), HTML.TH("Comment")), "\n			", HTML.TR(HTML.TH(HTML.DIV({
    "class": "badge pull-right alert-info"
  }, "presentation")), HTML.TD("0"), HTML.TD("Sent by a node when they present attached sensors. This is usually done in ", HTML.STRONG("setup()"), " at startup.")), "\n			", HTML.TR(HTML.TH(HTML.DIV({
    "class": "badge pull-right alert-info"
  }, "set")), HTML.TD("1"), HTML.TD("This message is sent from or to a sensor when a sensor value should be updated")), "\n			", HTML.TR(HTML.TH(HTML.DIV({
    "class": "badge pull-right alert-info"
  }, "req")), HTML.TD("2"), HTML.TD("Requests a variable value (usually from an actuator destined for controller).")), "\n			", HTML.TR(HTML.TH(HTML.DIV({
    "class": "badge pull-right alert-info"
  }, "internal")), HTML.TD("3"), HTML.TD("This is a special internal message. See table below for the details")), "\n			", HTML.TR(HTML.TH(HTML.DIV({
    "class": "badge pull-right alert-info"
  }, "stream")), HTML.TD("4"), HTML.TD("Used for OTA firmware updates")), "\n\n		"), "\n		", HTML.Raw('<div id="sensor-types"></div>'), "\n\n		", HTML.Raw('<p><span class="badge lg alert-info">presentation</span></p>'), "\n		", HTML.Raw('<p>When a presentation message is sent from a sensor, <span class="badge">sub-type</span> can one the following:</p>'), "\n		", HTML.Raw("<p>The payload of presentation message will be set to the library version (node device) or an optional description for the sensors.</p>"), "\n		", HTML.TABLE({
    "class": "table table-curved"
  }, "\n			", HTML.TR(HTML.TH("Type"), HTML.TH("Value"), HTML.TH("Comment"), HTML.TH("Variables")), "\n			", HTML.TR(HTML.TH("S_DOOR"), HTML.TD("0"), HTML.TD("Door and window sensors"), HTML.TD("V_TRIPPED, V_ARMED")), "\n			", HTML.TR(HTML.TH("S_MOTION"), HTML.TD("1"), HTML.TD("Motion sensors"), HTML.TD("V_TRIPPED, V_ARMED")), "\n			", HTML.TR(HTML.TH("S_SMOKE"), HTML.TD("2"), HTML.TD("Smoke sensor"), HTML.TD("V_TRIPPED, V_ARMED")), "\n			", HTML.TR(HTML.TH("S_LIGHT"), HTML.TD("3"), HTML.TD("Light Actuator (on/off)"), HTML.TD("V_STATUS (or V_LIGHT), V_WATT")), "\n			", HTML.TR(HTML.TH("S_BINARY"), HTML.TD("3"), HTML.TD("Binary device (on/off), Alias for S_LIGHT "), HTML.TD("V_STATUS (or V_LIGHT), V_WATT")), "\n			", HTML.TR(HTML.TH("S_DIMMER"), HTML.TD("4"), HTML.TD("Dimmable device of some kind"), HTML.TD("V_STATUS (on/off), V_DIMMER (dimmer level 0-100), V_WATT")), "\n			", HTML.TR(HTML.TH("S_COVER"), HTML.TD("5"), HTML.TD("Window covers or shades"), HTML.TD("V_UP, V_DOWN, V_STOP, V_PERCENTAGE")), "\n			", HTML.TR(HTML.TH("S_TEMP"), HTML.TD("6"), HTML.TD("Temperature sensor"), HTML.TD("V_TEMP, V_ID")), "\n			", HTML.TR(HTML.TH("S_HUM"), HTML.TD("7"), HTML.TD("Humidity sensor"), HTML.TD("V_HUM")), "\n			", HTML.TR(HTML.TH("S_BARO"), HTML.TD("8"), HTML.TD("Barometer sensor (Pressure)"), HTML.TD("V_PRESSURE, V_FORECAST")), "\n			", HTML.TR(HTML.TH("S_WIND"), HTML.TD("9"), HTML.TD("Wind sensor"), HTML.TD("V_WIND, V_GUST")), "\n			", HTML.TR(HTML.TH("S_RAIN"), HTML.TD("10"), HTML.TD("Rain sensor"), HTML.TD("V_RAIN, V_RAINRATE")), "\n			", HTML.TR(HTML.TH("S_UV"), HTML.TD("11"), HTML.TD("UV sensor"), HTML.TD("V_UV")), "\n			", HTML.TR(HTML.TH("S_WEIGHT"), HTML.TD("12"), HTML.TD("Weight sensor for scales etc."), HTML.TD("V_WEIGHT, V_IMPEDANCE")), "\n			", HTML.TR(HTML.TH("S_POWER"), HTML.TD("13"), HTML.TD("Power measuring device, like power meters"), HTML.TD("V_WATT, V_KWH")), "\n			", HTML.TR(HTML.TH("S_HEATER"), HTML.TD("14"), HTML.TD("Heater device"), HTML.TD("V_HVAC_SETPOINT_HEAT, V_HVAC_FLOW_STATE, V_TEMP")), "\n			", HTML.TR(HTML.TH("S_DISTANCE"), HTML.TD("15"), HTML.TD("Distance sensor"), HTML.TD("V_DISTANCE, V_UNIT_PREFIX")), "\n			", HTML.TR(HTML.TH("S_LIGHT_LEVEL"), HTML.TD("16"), HTML.TD("Light sensor"), HTML.TD("V_LIGHT_LEVEL (uncalibrated percentage),  V_LEVEL (light level in lux)")), "\n			", HTML.TR(HTML.TH("S_ARDUINO_NODE"), HTML.TD("17"), HTML.TD("Arduino node device"), HTML.TD()), "\n			", HTML.TR(HTML.TH("S_ARDUINO_REPEATER_NODE"), HTML.TD("18"), HTML.TD("Arduino repeating node device"), HTML.TD()), "\n			", HTML.TR(HTML.TH("S_LOCK"), HTML.TD("19"), HTML.TD("Lock device"), HTML.TD("V_LOCK_STATUS")), "\n			", HTML.TR(HTML.TH("S_IR"), HTML.TD("20"), HTML.TD("Ir sender/receiver device"), HTML.TD("V_IR_SEND, V_IR_RECEIVE")), "\n			", HTML.TR(HTML.TH("S_WATER"), HTML.TD("21"), HTML.TD("Water meter"), HTML.TD("V_FLOW, V_VOLUME")), "\n			", HTML.TR(HTML.TH("S_AIR_QUALITY"), HTML.TD("22"), HTML.TD("Air quality sensor e.g. MQ-2"), HTML.TD("V_LEVEL, V_UNIT_PREFIX")), "\n			", HTML.TR(HTML.TH("S_CUSTOM"), HTML.TD("23"), HTML.TD("Use this for custom sensors where no other fits."), HTML.TD()), "\n			", HTML.TR(HTML.TH("S_DUST"), HTML.TD("24"), HTML.TD("Dust level sensor"), HTML.TD("V_LEVEL, V_UNIT_PREFIX")), "\n			", HTML.TR(HTML.TH("S_SCENE_CONTROLLER"), HTML.TD("25"), HTML.TD("Scene controller device"), HTML.TD("V_SCENE_ON, V_SCENE_OFF")), "\n			", HTML.TR(HTML.TH("S_RGB_LIGHT"), HTML.TD("26"), HTML.TD("RGB light"), HTML.TD("V_RGB, V_WATT")), "\n			", HTML.TR(HTML.TH("S_RGBW_LIGHT"), HTML.TD("27"), HTML.TD("RGBW light (with separate white component)"), HTML.TD("V_RGBW, V_WATT")), "\n			", HTML.TR(HTML.TH("S_COLOR_SENSOR"), HTML.TD("28"), HTML.TD("Color sensor"), HTML.TD("V_RGB")), "\n			", HTML.TR(HTML.TH("S_HVAC"), HTML.TD("29"), HTML.TD("Thermostat/HVAC device"), HTML.TD("V_HVAC_SETPOINT_HEAT, V_HVAC_SETPOINT_COLD, V_HVAC_FLOW_STATE, V_HVAC_FLOW_MODE, V_HVAC_SPEED")), "\n			", HTML.TR(HTML.TH("S_MULTIMETER"), HTML.TD("30"), HTML.TD("Multimeter device"), HTML.TD("V_VOLTAGE, V_CURRENT, V_IMPEDANCE")), "\n			", HTML.TR(HTML.TH("S_SPRINKLER"), HTML.TD("31"), HTML.TD("Sprinkler device"), HTML.TD("V_STATUS (turn on/off), V_TRIPPED (if fire detecting device)")), "\n			", HTML.TR(HTML.TH("S_WATER_LEAK"), HTML.TD("32"), HTML.TD("Water leak sensor"), HTML.TD("V_TRIPPED, V_ARMED")), " \n			", HTML.TR(HTML.TH("S_SOUND"), HTML.TD("33"), HTML.TD("Sound sensor"), HTML.TD("V_LEVEL (in dB), V_TRIPPED, V_ARMED")), "\n			", HTML.TR(HTML.TH("S_VIBRATION"), HTML.TD("34"), HTML.TD("Vibration sensor"), HTML.TD("V_LEVEL (vibration in Hz), V_TRIPPED, V_ARMED")), "\n			", HTML.TR(HTML.TH("S_MOISTURE"), HTML.TD("35"), HTML.TD("Moisture sensor"), HTML.TD("V_LEVEL (water content or moisture in percentage?), V_TRIPPED, V_ARMED")), " \n		"), "\n\n\n		", HTML.Raw('<p><span class="badge lg alert-info">set</span><span class="lg">, </span><span class="badge lg alert-info">req</span></p>'), "\n		", HTML.Raw('<div id="variable-types"></div>'), "\n		", HTML.Raw('<p>When a set or request message is being sent, the <span class="badge">sub-type</span> has to be one of the following:</p>'), "\n		", HTML.TABLE({
    "class": "table table-curved"
  }, "\n			", HTML.TR(HTML.TH("Type"), HTML.TH("Value"), HTML.TH("Comment"), HTML.TH("Used by")), "\n			", HTML.TR(HTML.TH("V_TEMP"), HTML.TD("0"), HTML.TD("Temperature "), HTML.TD("S_TEMP, S_HEATER, S_HVAC")), "\n			", HTML.TR(HTML.TH("V_HUM"), HTML.TD("1"), HTML.TD("Humidity"), HTML.TD("S_HUM")), "\n			", HTML.TR(HTML.TH("V_STATUS"), HTML.TD("2"), HTML.TD("Binary status. 0=off 1=on"), HTML.TD("S_LIGHT, S_DIMMER, S_SPRINKLER, S_HVAC, S_HEATER")), "\n			", HTML.TR(HTML.TD("V_LIGHT"), HTML.TD("2"), HTML.TD("Deprecated. Alias for V_STATUS. Light status. 0=off 1=on"), HTML.TD("S_LIGHT, S_DIMMER, S_SPRINKLER")), "\n			", HTML.TR(HTML.TH("V_PERCENTAGE"), HTML.TD("3"), HTML.TD("Percentage value. 0-100 (%)"), HTML.TD("S_DIMMER")), "\n			", HTML.TR(HTML.TD("V_DIMMER"), HTML.TD("3"), HTML.TD("Deprecated. Alias for V_PERCENTAGE. Dimmer value. 0-100 (%)"), HTML.TD("S_DIMMER")), "\n			", HTML.TR(HTML.TH("V_PRESSURE"), HTML.TD("4"), HTML.TD("Atmospheric Pressure"), HTML.TD("S_BARO")), "\n			", HTML.TR(HTML.TH("V_FORECAST"), HTML.TD("5"), HTML.TD('Whether forecast. One of "stable", "sunny", "cloudy", "unstable", "thunderstorm" or "unknown"'), HTML.TD("S_BARO")), "\n			", HTML.TR(HTML.TH("V_RAIN"), HTML.TD("6"), HTML.TD("Amount of rain"), HTML.TD("S_RAIN")), "\n			", HTML.TR(HTML.TH("V_RAINRATE"), HTML.TD("7"), HTML.TD("Rate of rain"), HTML.TD("S_RAIN")), "\n			", HTML.TR(HTML.TH("V_WIND"), HTML.TD("8"), HTML.TD("Windspeed"), HTML.TD("S_WIND")), "\n			", HTML.TR(HTML.TH("V_GUST"), HTML.TD("9"), HTML.TD("Gust"), HTML.TD("S_WIND")), "\n			", HTML.TR(HTML.TH("V_DIRECTION"), HTML.TD("10"), HTML.TD("Wind direction"), HTML.TD("S_WIND")), "\n			", HTML.TR(HTML.TH("V_UV"), HTML.TD("11"), HTML.TD("UV light level"), HTML.TD("S_UV")), "\n			", HTML.TR(HTML.TH("V_WEIGHT"), HTML.TD("12"), HTML.TD("Weight (for scales etc)"), HTML.TD("S_WEIGHT")), "\n			", HTML.TR(HTML.TH("V_DISTANCE"), HTML.TD("13"), HTML.TD("Distance"), HTML.TD("S_DISTANCE")), "\n			", HTML.TR(HTML.TH("V_IMPEDANCE"), HTML.TD("14"), HTML.TD("Impedance value"), HTML.TD("S_MULTIMETER, S_WEIGHT")), "\n			", HTML.TR(HTML.TH("V_ARMED"), HTML.TD("15"), HTML.TD("Armed status of a security sensor. 1=Armed, 0=Bypassed"), HTML.TD("S_DOOR, S_MOTION, S_SMOKE, S_SPRINKLER, S_WATER_LEAK, S_SOUND, S_VIBRATION, S_MOISTURE")), "\n			", HTML.TR(HTML.TH("V_TRIPPED"), HTML.TD("16"), HTML.TD("Tripped status of a security sensor. 1=Tripped, 0=Untripped"), HTML.TD("S_DOOR, S_MOTION, S_SMOKE, S_SPRINKLER, S_WATER_LEAK, S_SOUND, S_VIBRATION, S_MOISTURE")), "\n			", HTML.TR(HTML.TH("V_WATT"), HTML.TD("17"), HTML.TD("Watt value for power meters"), HTML.TD("S_POWER, S_LIGHT, S_DIMMER, S_RGB, S_RGBW")), "\n			", HTML.TR(HTML.TH("V_KWH"), HTML.TD("18"), HTML.TD("Accumulated number of KWH for a power meter"), HTML.TD("S_POWER")), "\n			", HTML.TR(HTML.TH("V_SCENE_ON"), HTML.TD("19"), HTML.TD("Turn on a scene"), HTML.TD("S_SCENE_CONTROLLER")), "\n			", HTML.TR(HTML.TH("V_SCENE_OFF"), HTML.TD("20"), HTML.TD("Turn of a scene"), HTML.TD("S_SCENE_CONTROLLER")), "\n			", HTML.TR(HTML.TH("V_HVAC_FLOW_STATE"), HTML.TD("21"), HTML.TD('Mode of header. One of "Off", "HeatOn", "CoolOn", or "AutoChangeOver"'), HTML.TD("S_HVAC, S_HEATER")), "\n			", HTML.TR(HTML.TH("V_HVAC_SPEED"), HTML.TD("22"), HTML.TD('HVAC/Heater fan speed ("Min", "Normal", "Max", "Auto")'), HTML.TD("S_HVAC, S_HEATER")), "\n			", HTML.TR(HTML.TH("V_LIGHT_LEVEL"), HTML.TD("23"), HTML.TD("Uncalibrated light level. 0-100%. Use V_LEVEL for light level in lux."), HTML.TD("S_LIGHT_LEVEL")), "\n			", HTML.TR(HTML.TH("V_VAR1"), HTML.TD("24"), HTML.TD("Custom value"), HTML.TD("Any device")), "\n			", HTML.TR(HTML.TH("V_VAR2"), HTML.TD("25"), HTML.TD("Custom value"), HTML.TD("Any device")), "\n			", HTML.TR(HTML.TH("V_VAR3"), HTML.TD("26"), HTML.TD("Custom value"), HTML.TD("Any device")), "\n			", HTML.TR(HTML.TH("V_VAR4"), HTML.TD("27"), HTML.TD("Custom value"), HTML.TD("Any device")), "\n			", HTML.TR(HTML.TH("V_VAR5"), HTML.TD("28"), HTML.TD("Custom value"), HTML.TD("Any device")), "\n			", HTML.TR(HTML.TH("V_UP"), HTML.TD("29"), HTML.TD("Window covering. Up."), HTML.TD("S_COVER")), "\n			", HTML.TR(HTML.TH("V_DOWN"), HTML.TD("30"), HTML.TD("Window covering. Down."), HTML.TD("S_COVER")), "\n			", HTML.TR(HTML.TH("V_STOP"), HTML.TD("31"), HTML.TD("Window covering. Stop."), HTML.TD("S_COVER")), "\n			", HTML.TR(HTML.TH("V_IR_SEND"), HTML.TD("32"), HTML.TD("Send out an IR-command"), HTML.TD("S_IR")), "\n			", HTML.TR(HTML.TH("V_IR_RECEIVE"), HTML.TD("33"), HTML.TD("This message contains a received IR-command"), HTML.TD("S_IR")), "\n			", HTML.TR(HTML.TH("V_FLOW"), HTML.TD("34"), HTML.TD("Flow of water (in meter)"), HTML.TD("S_WATER")), "\n			", HTML.TR(HTML.TH("V_VOLUME"), HTML.TD("35"), HTML.TD("Water volume"), HTML.TD("S_WATER")), "\n			", HTML.TR(HTML.TH("V_LOCK_STATUS"), HTML.TD("36"), HTML.TD("Set or get lock status. 1=Locked, 0=Unlocked"), HTML.TD("S_LOCK")), "\n			", HTML.TR(HTML.TH("V_LEVEL"), HTML.TD("37"), HTML.TD("Used for sending level-value"), HTML.TD("S_DUST, S_AIR_QUALITY, S_SOUND (dB), S_VIBRATION (hz), S_LIGHT_LEVEL (lux)")), "\n			", HTML.TR(HTML.TH("V_VOLTAGE"), HTML.TD("38"), HTML.TD("Voltage level"), HTML.TD("S_MULTIMETER")), "\n			", HTML.TR(HTML.TH("V_CURRENT"), HTML.TD("39"), HTML.TD("Current level"), HTML.TD("S_MULTIMETER")), "\n\n			", HTML.TR(HTML.TH("V_RGB"), HTML.TD("40"), HTML.TD('RGB value transmitted as ASCII hex string (I.e "ff0000" for red)'), HTML.TD("S_RGB_LIGHT, S_COLOR_SENSOR")), "\n			", HTML.TR(HTML.TH("V_RGBW"), HTML.TD("41"), HTML.TD('RGBW value transmitted as ASCII hex string (I.e "ff0000ff" for red + full white)'), HTML.TD("S_RGBW_LIGHT")), "\n			", HTML.TR(HTML.TH("V_ID"), HTML.TD("42"), HTML.TD("Optional unique sensor id (e.g. OneWire DS1820b ids)"), HTML.TD("S_TEMP")), "\n\n			", HTML.TR(HTML.TH("V_UNIT_PREFIX"), HTML.TD("43"), HTML.TD("Allows sensors to send in a string representing the unit prefix to be displayed in GUI. This is not parsed by controller! E.g. cm, m, km, inch."), HTML.TD("S_DISTANCE, S_DUST, S_AIR_QUALITY")), "\n\n			", HTML.TR(HTML.TH("V_HVAC_SETPOINT_COOL"), HTML.TD("44"), HTML.TD("HVAC cold setpoint"), HTML.TD("S_HVAC")), "\n			", HTML.TR(HTML.TH("V_HVAC_SETPOINT_HEAT"), HTML.TD("45"), HTML.TD("HVAC/Heater setpoint"), HTML.TD("S_HVAC, S_HEATER")), "\n			", HTML.TR(HTML.TH("V_HVAC_FLOW_MODE"), HTML.TD("46"), HTML.TD('Flow mode for HVAC ("Auto", "ContinuousOn", "PeriodicOn")'), HTML.TD("S_HVAC")), "\n\n		"), "\n\n		", HTML.Raw('<p><span class="badge lg alert-info">internal</span></p>'), "\n\n		", HTML.Raw("<p>The internal messages are used for different tasks in the communication between sensors, the gateway to controller and between sensors and the gateway.</p>"), "\n\n		", HTML.Raw('<p>When an internal messages is sent, the <span class="badge">sub-type</span> has to be one of the following:</p>'), "\n		", HTML.TABLE({
    "class": "table table-curved"
  }, "\n			", HTML.TR(HTML.TH("Type"), HTML.TH("Value"), HTML.TH("Comment")), "\n\n			", HTML.TR(HTML.TH("I_BATTERY_LEVEL"), HTML.TD("0"), HTML.TD("Use this to report the battery level (in percent 0-100).")), "\n			", HTML.TR(HTML.TH("I_TIME"), HTML.TD("1"), HTML.TD("Sensors can request the current time from the Controller using this message. The time will be reported as the seconds since 1970")), "\n			", HTML.TR(HTML.TH("I_VERSION"), HTML.TD("2"), HTML.TD("Used to request gateway version from controller.")), "\n			", HTML.TR(HTML.TH("I_ID_REQUEST"), HTML.TD("3"), HTML.TD("Use this to request a unique node id from the controller.")), "\n			", HTML.TR(HTML.TH("I_ID_RESPONSE"), HTML.TD("4"), HTML.TD("Id response back to node. Payload contains node id.")), "\n			", HTML.TR(HTML.TH("I_INCLUSION_MODE"), HTML.TD("5"), HTML.TD("Start/stop inclusion mode of the Controller (1=start, 0=stop).")), "\n\n			", HTML.TR(HTML.TH("I_CONFIG"), HTML.TD("6"), HTML.TD("Config request from node. Reply with (M)etric or (I)mperal back to sensor.")), "\n\n			", HTML.TR(HTML.TH("I_FIND_PARENT"), HTML.TD("7"), HTML.TD("When a sensor starts up, it broadcast a search request to all neighbor nodes. They reply with a I_FIND_PARENT_RESPONSE.")), "\n			", HTML.TR(HTML.TH("I_FIND_PARENT_RESPONSE"), HTML.TD("8"), HTML.TD("Reply message type to I_FIND_PARENT request.")), "\n\n			", HTML.TR(HTML.TH("I_LOG_MESSAGE"), HTML.TD("9"), HTML.TD("Sent by the gateway to the Controller to trace-log a message")), "\n			", HTML.TR(HTML.TH("I_CHILDREN"), HTML.TD("10"), HTML.TD("A message that can be used to transfer child sensors (from EEPROM routing table) of a repeating node.")), "\n			", HTML.TR(HTML.TH("I_SKETCH_NAME"), HTML.TD("11"), HTML.TD("Optional sketch name that can be used to identify sensor in the Controller GUI")), "\n			", HTML.TR(HTML.TH("I_SKETCH_VERSION"), HTML.TD("12"), HTML.TD("Optional sketch version that can be reported to keep track of the version of sensor in the Controller GUI.")), "\n\n			", HTML.TR(HTML.TH("I_REBOOT"), HTML.TD("13"), HTML.TD("Used by OTA firmware updates. Request for node to reboot.")), "\n			", HTML.TR(HTML.TH("I_GATEWAY_READY"), HTML.TD("14"), HTML.TD("Send by gateway to controller when startup is complete.")), "\n			", HTML.TR(HTML.TH("I_REQUEST_SIGNING"), HTML.TD("15"), HTML.TD("Used between sensors when initialting signing.")), "\n			", HTML.TR(HTML.TH("I_GET_NONCE"), HTML.TD("16"), HTML.TD("Used between sensors when requesting nonce.")), "\n			", HTML.TR(HTML.TH("I_GET_NONCE_RESPONSE"), HTML.TD("17"), HTML.TD("Used between sensors for nonce response.")), "\n\n		"), "\n\n\n\n		", HTML.Raw("<h2>Serial Communication Examples</h2>"), "\n		", HTML.Raw("<p>Here are a few example of the serial protocol (from the gateways perspective).</p>"), "\n\n		", HTML.Raw("<p><strong>Received message from radio network from one of the sensors:</strong> Incoming presentation message from node 12 with child sensor 6. The presentation is for a binary light <strong>S_LIGHT</strong>. The payload holds a description of the sensor. Gateway passes this over to the controller.</p>"), "\n		", HTML.Raw('<p><div class="scommand">12;6;0;0;3;My Light\\n</div></p>'), "\n\n\n		", HTML.Raw("<p><strong>Received message from radio network from one of the sensors:</strong> Incoming temperature <strong>V_TEMP</strong> message from node 12 with child sensor 6.  The gateway passed this over to the controller.</p>"), "\n		", HTML.Raw('<p><div class="scommand">12;6;1;0;0;36.5\\n</div></p>'), "\n\n		", HTML.Raw("<p><strong>Received command from the controller that should be passed to radio network:</strong> Outgoing message to node 13. Set <strong>V_LIGHT</strong> variable to 1 (=turn on) for child sensor 7. No ack is requested from destination node.</p>"), "\n		", HTML.Raw('<p><div class="scommand">13;7;1;0;2;1\\n</div></p>'), "\n\n\n		"), "\n	");
}));

Template.__checkName("download_sensor_api_15");
Template["download_sensor_api_15"] = new Template("Template.download_sensor_api_15", (function() {
  var view = this;
  return HTML.DIV({
    "class": "col-md-12"
  }, HTML.Raw("\n		<h1>MySensors Arduino Library (v1.5)</h1>\n		"), HTML.DIV({
    "class": "well"
  }, "\n		", HTML.Raw('<a href="/api/api.png" data-lightbox="image-finding" title="API ladies"><img src="/api/api.png" style="float:right;width:250px;padding-left:20px"></a>'), "\n\n		", HTML.Raw('<p><strong>Older Versions: </strong> <a class="btn btn-xs btn-primary" href="/download/sensor_api_14" title="1.4"><span class="glyphicon glyphicon-chevron-right"></span> 1.4</a> | <a class="btn btn-xs btn-primary" href="/download/sensor_api_13" title="1.3"><span class="glyphicon glyphicon-chevron-right"></span> 1.3</a></p>'), "\n\n\n		", HTML.Raw("<p>The MySensors C++ API consists of two main classes; <strong>MySensor</strong>, <strong>MyMessage</strong>. Let's start off with a little Sensor example.</p>"), "\n\n		", HTML.Raw("<h2>Sensor Nodes</h2>"), "\n\n		", HTML.Raw("<p>To create the Arduino program (also known as sketch) that reports sensor data over the air you only need to write a few lines of code:</p>"), "\n\n		", Blaze._TemplateWith(function() {
    return {
      sketch: Spacebars.call("sketch:46246")
    };
  }, function() {
    return Spacebars.include(view.lookupTemplate("codebender"));
  }), "\n\n		", HTML.Raw('<!--\n		<pre><code class="cpp">\n		#include &lt;MySensor.h>\n		#include &lt;SPI.h>\n\n		#define ID 1\n		#define OPEN 1\n		#define CLOSE 0\n\n		MySensor gw;\n		MyMessage msg(ID, V_TRIPPED);\n\n		void setup()\n		{\n			gw.begin();\n			gw.present(ID, S_DOOR);\n		}\n\n		void loop()\n		{\n				 gw.send(msg.set(OPEN));\n				 delay(10000); // Wait 10 seconds\n		}\n		</code></pre>\n		-->'), "\n\n		", HTML.Raw("<h3>Ok! So, what is happening here?</h3>"), "\n\n		", HTML.Raw("<h4>Initialization</h4>"), "\n\n		", HTML.Raw("<p>The MySensors library is started when you call <strong>gw.begin()</strong>.</p>"), "\n		", HTML.Raw("<p>If this is the first time the node is started it will fetch a unique node-id from the controller.</p>"), "\n		", HTML.Raw("<p>Once an id has been received from the controller it will be saved in the Arduino's static EEPROM memory. The id is automatically read from EEPROM each time the Sensor node resets or powers-up.</p>"), "\n		", HTML.Raw("<p>The initialization also determines the shortest network path to the gateway.</p>"), "\n\n		", HTML.Raw("<h4>Presentation</h4>"), "\n		", HTML.Raw('<p>Your sensor must first present itself to the controller. The presentation is a hint to allow controller prepare for the sensor data that eventually will come. This is done by calling <strong>gw.present(<span class="badge">child-sensor-id</span>,<span class="badge">sensor-type</span>)</strong> </p>'), "\n\n		", HTML.Raw('<p><span class="badge">sensor-type</span> The list of supported sensor types is constantly growing.  For a more in-depth sensor type explanation, refer to the <a href="/download/serial_api_15#sensor-types">sensor type tables</a>. </p>'), "\n\n		", HTML.Raw('<pre><code class="cpp">typedef enum {\n	S_DOOR, S_MOTION, S_SMOKE, S_LIGHT, S_DIMMER, S_COVER, S_TEMP, ...\n} sensor;</code></pre>'), "\n\n		", HTML.Raw('<p><span class="badge">child-sensor-id</span> Each radio node can report data for up to 254 different child sensors. You are free to choose the child id yourself. You should avoid using child-id 255 because it is used for things like sending in battery level and other (protocol internal) node specific information. </p>'), "\n\n		", HTML.Raw("<h4>Sending Data</h4>"), "\n\n		", HTML.Raw('<p>To send data you have to create a <strong>MyMessage</strong> container to hold the information. Declaring a container looks like this:<br><strong>MyMessage msg(<span class="badge">child-sensor-id</span>, <span class="badge">variable-type</span>);</strong> </p>'), "\n\n		", HTML.Raw('<p>In the loop() method of the example above we do the actual sending by calling <strong>gw.send(msg.set(<span class="badge">payload</span>))</strong>. This is where the sensor data is transferred to the controller (or some other destination).</p>'), "\n\n		", HTML.Raw('<p><span class="badge">child-sensor-id</span> This is where you specify the child sensor that\'s reporting the data. In the example we only have one child sensor so we pick 0. </p>'), "\n\n		", HTML.Raw('<p> <span class="badge">variable-type</span> When sending data to the controller you must specify what type of data you report. We call this the <strong>variable type</strong>. Often the sensor type and variable type is almost the same but there are a few sensors that report more than one variable type-value. For example; Power meters could report both the accumulated KWH and the current WATTAGE. The list of variable types is also growing.\n			You can read the <a href="/download/serial_api_15#variable-types">variable type table</a> for more details. </p>'), "\n\n\n		", HTML.Raw('<pre><code class="cpp">typedef enum {\n	V_TEMP, V_HUM, V_LIGHT, V_DIMMER, V_PRESSURE, V_FORECAST, V_RAIN, ...\n} variableType;</code></pre>'), "\n\n\n		", HTML.Raw("<p>You will always find the most recent list of supported sensor and variables-types in MyMessage.h on GitHub:</p>"), "\n		", Blaze._TemplateWith(function() {
    return {
      repo: Spacebars.call("Arduino"),
      path: Spacebars.call("libraries/MySensors"),
      name: Spacebars.call("MyMessage.h")
    };
  }, function() {
    return Spacebars.include(view.lookupTemplate("dl"));
  }), "\n\n\n		", HTML.Raw("<p>The above example was intentionally simplistic and pointless because it reports the same value every 10 seconds. However, it should help you understand how to write a sensor sketch. There are plenty of more advanced examples here on MySensors if you enjoy copy-paste programming ;).</p>"), "\n\n\n\n		", HTML.Raw('<h2 id="relaying-nodes">Create Repeating Nodes</h2>'), "\n\n		", HTML.Raw('<p>If you live in a <a href="http://en.wikipedia.org/wiki/Faraday_cage">Faraday\'s cage</a> or a huge mansion you might need a few repeater nodes to cover the full area. This is when the build-in repeater functionality comes in handy.</p>'), "\n\n		", HTML.Raw("<p>To turn a node into a repeater, you'll have to do three things:</p>"), "\n		", HTML.Raw('<li> Enable repeater-mode in gw.begin():\n		<pre><code class="cpp">gw.begin(NULL, AUTO, true)</code></pre>\n		</li>'), "\n		", HTML.Raw("<li>Keep node awake all time (no slepping!).</li>"), "\n		", HTML.Raw("<li>Pump the radio network by calling <strong>process()</strong> in your <strong>loop()</strong>. The MySensors library will take care of all routing in the background.</li>"), "\n		", HTML.Raw("<br>"), "\n		", HTML.Raw("<p>Here is a full example of a repeater node: </p>"), "\n\n		", Blaze._TemplateWith(function() {
    return {
      sketch: Spacebars.call("example/MySensor/RepeaterNode")
    };
  }, function() {
    return Spacebars.include(view.lookupTemplate("codebender"));
  }), "\n\n		", HTML.Raw("<h2>Configuration</h2>"), "\n		", HTML.Raw("<p>The configuration file <strong>MyConfig.h</strong> contains many useful options and default values used when compiling your sensor code. It is pretty well documented and you can have a look at it here.</p>"), "\n		", Blaze._TemplateWith(function() {
    return {
      repo: Spacebars.call("Arduino"),
      path: Spacebars.call("libraries/MySensors"),
      name: Spacebars.call("MyConfig.h")
    };
  }, function() {
    return Spacebars.include(view.lookupTemplate("dl"));
  }), "\n		", HTML.Raw("<p>The most common options you'll be using is the DEBUG which enabled/disables debug messages. You'll also configure things like default radio channels, LED blinking feature and signing support here. </p>"), "\n\n\n		", HTML.Raw("<h2>The Full API</h2>"), "\n		", HTML.Raw("<p>Ok, you're ready! Here is the full API. </p>"), "\n\n		", HTML.Raw("<h3>MySensor constructor</h3>"), "\n		", HTML.Raw("<p>Creates an instance of the library. You can skip the arguments if you want to use the default configuration and NRF24L01+ radio you just need to construct it like this:</p>"), "\n		", HTML.Raw('<pre><code class="cpp">MySensor gw;</code></pre>'), "\n\n		", HTML.Raw("<h4>Advanced initialization</h4>"), "\n		", HTML.Raw("<p>It's also possible to construct an instance with RFM69 radio driver and/or enable signing support. You can choose one of the following radio drivers:</p>"), "\n\n		", HTML.Raw('<pre><code class="cpp">MyTransportNRF24 transport(RF24_CE_PIN, RF24_CS_PIN, RF24_PA_LEVEL_GW);</code></pre>'), "\n		", HTML.Raw("<p>or</p>"), "\n		", HTML.Raw('<pre><code class="cpp">MyTransportRFM69 transport(RFM69_FREQUENCY, RFM69_NETWORKID, RF69_SPI_CS, RF69_IRQ_PIN, isRFM69HW, RF69_IRQ_NUM);</code></pre>'), "\n		", HTML.Raw('<p>Signing messages can be done using a hardware module (ATSHA204) or by enabling a software implementation (uses more precious memory). For a more comprehensive setup guide <a href="http://forum.mysensors.org/topic/1021">look here</a>. To enable signing support you must turn on <strong>MY_SIGNING_FEATURE</strong> in MyConfig.h before compiling your gateway and sensor. Use one of the following three options. </p>'), "\n\n		", HTML.Raw("<p>Dummy signing driver. For debug purposes (no signing occurs).</p>"), "\n		", HTML.Raw('<pre><code class="cpp">MySigningNone signer; </code></pre>'), " \n		", HTML.Raw("<p>Software signing driver (see MySigningAtsha204Soft.h for optional constructor arguments).</p>"), "\n		", HTML.Raw('<pre><code class="cpp">MySigningAtsha204Soft signer; </code></pre>'), "\n		", HTML.Raw("<p>Atsha204 hardware signing driver (see MySigningAtsha204.h for optional constructor arguments).</p>"), "\n		", HTML.Raw('<pre><code class="cpp">MySigningAtsha204 signer; </code></pre>'), "\n\n		", HTML.Raw("<p>We're also tried to make the MySensors class hardware independent by introducing hardware profiles. They handle platform dependent things like sleeping, storage (EEPROM), watchdog, serial in- and output. Currently there is only one implementation for the ATMega328p (which also works fine for AtMega 2560). Construct the class like this:</p>"), "\n\n		", HTML.Raw('<pre><code class="cpp">MyHwATMega328 hw;</code></pre>'), "\n\n		", HTML.Raw("<p>Ok, now you have all the bits needed to construct the MySensors class from scratch yourself. The constructor looks a bit different weather or not you've enabled the <strong>MY_SIGNING_FEATURE</strong> or <strong>WITH_LEDS_BLINKING</strong> feature in MyConfig.h</p>"), "\n\n		", HTML.Raw('<pre><code class="cpp">MySensor gw(transport, \n	hw, \n	signer, /* if MY_SIGNING_FEATURE is enabled */\n	RADIO_RX_LED_PIN, RADIO_TX_LED_PIN, RADIO_ERROR_LED_PIN /* if WITH_LEDS_BLINKING is enabled */\n);</code></pre>'), "\n\n\n\n		", HTML.Raw("<h3>Starting up the library</h3>"), "\n		", HTML.Raw("<p>To initialize radio and start the library, you must call <strong>begin()</strong>. Begin initializes the sensor node but you can also configure the sensor node operating parameters manually. Call this before anything else in the library</p>"), "\n		", HTML.Raw('<pre><code class="cpp">void begin(void (*_msgCallback)(const MyMessage &amp;), uint8_t nodeId, boolean repeaterMode,\n		uint8_t parentNodeId);</code></pre>'), "\n		", HTML.Raw("<strong>incomingMessageCallback</strong>"), " - Callback function for incoming messages from other nodes or controller and request responses. Default is NULL.", HTML.Raw("<br>"), "\n		", HTML.Raw("<strong>nodeId</strong>"), " - The unique id (1-254) for this sensor. Default is AUTO(255) which means sensor tries to fetch an id from controller.", HTML.Raw("<br>"), "\n		", HTML.Raw("<strong>repeaterMode</strong>"), " - Activate repeater mode. This node will forward messages to other nodes in the radio network. Make sure to call process() regularly. Default in false", HTML.Raw("<br>"), "\n		", HTML.Raw("<strong>parentNodeId</strong>"), " - Use this to force node to always communicate with a certain parent node. Default is AUTO which means node automatically tries to find a parent.", HTML.Raw("<br>"), "\n\n\n		", HTML.Raw("<h3>Received node id</h3>"), "\n		", HTML.Raw("<p>When you enable auto mode, the sensor automatically fetches a unique node id (auto mode). The id received can be retrieved by calling this method.</p>"), "\n		", HTML.Raw('<pre><code class="cpp">uint8_t getNodeId();</code></pre>'), "\n\n		", HTML.Raw("<h3>Presentation</h3>"), "\n		", HTML.Raw("<p>The sensors should present themselves before they start reporting sensor data to the controller.</p>"), "\n		", HTML.Raw('<pre><code class="cpp">void present(uint8_t childSensorId, uint8_t sensorType, const char *description, bool ack);</code></pre>'), "\n		", HTML.Raw("<strong>childSensorId</strong>"), " - The unique child id you want to choose for the sensor connected to this Arduino. Range 0-254.", HTML.Raw("<br>"), "\n		", HTML.Raw("<strong>sensorType</strong>"), " - The ", HTML.Raw('<a href="/download/serial_api_15#sensor-type">sensor type</a>'), " you want to create.", HTML.Raw("<br>"), "\n		", HTML.Raw("<strong>description</strong>"), " An optional textual description of the attached sensor.", HTML.Raw("<br>"), " \n		", HTML.Raw("<strong>ack</strong>"), " - Set this to true if you want destination node to send ack back to this node. Default is not to request any ack.", HTML.Raw("<br>"), "\n		", HTML.Raw("<br>"), "\n		", HTML.Raw("<p>You can also send in some optional meta information for this sensor node.</p>"), "\n		", HTML.Raw('<pre><code class="cpp">void sendSketchInfo(const char *name, const char *version, bool ack);</code></pre>'), "\n		", HTML.Raw("<strong>name</strong>"), " - String containing a short Sketch name or NULL if not applicable.  Max 25 characters.", HTML.Raw("<br>"), "\n		", HTML.Raw("<strong>version</strong>"), " - String containing a short Sketch version or NULL if not applicable.", HTML.Raw("<br>"), "\n		", HTML.Raw("<strong>ack</strong>"), " - Set this to true if you want destination node to send ack back to this node. Default is not to request any ack.", HTML.Raw("<br>"), "\n\n\n		", HTML.Raw("<h3>Sending data</h3>"), "\n		", HTML.Raw("<p>You can send data to the controller or some other sensor by using the <strong>send(msg)</strong> method.</p>"), "\n		", HTML.Raw('<pre><code class="cpp">bool send(MyMessage &amp;msg, bool ack);</code></pre>'), "\n		", HTML.Raw("<strong>msg</strong>"), " - The message you want to send. See ", HTML.Raw('<a href="#MyMessage">MyMessage</a>'), " for details.", HTML.Raw("<br>"), "\n		", HTML.Raw("<strong>ack</strong>"), " - Set this to true if you want destination node to send ack back to this node. Default is not to request any ack.", HTML.Raw("<br>"), "\n		", HTML.Raw("<br>"), "\n		", HTML.Raw("<p>If your node is running on batteries and you've implemented battery level measurements you can send the battery level back to the controller.</p>"), "\n		", HTML.Raw('<pre><code class="cpp">void sendBatteryLevel(uint8_t level, bool ack);</code></pre>'), "\n		", HTML.Raw("<strong>level</strong>"), " - Battery level between 0-100(%)", HTML.Raw("<br>"), "\n		", HTML.Raw("<strong>ack</strong>"), " - Set this to true if you want destination node to send ack back to this node. Default is not to request any ack.", HTML.Raw("<br>"), "\n\n\n		", HTML.Raw("<h3>Requesting data</h3>"), "\n		", HTML.Raw("<p> Requests a variable value from gateway or some other sensor in the radio network. Make sure to add callback-method in begin-method to handle request responses. If you send this request to some other sensor-node you must handle the reply message yourself in the destination node.</p>"), "\n\n		", HTML.Raw('<pre><code class="cpp">void request(uint8_t childSensorId, uint8_t variableType, uint8_t destination);</code></pre>'), "\n		", HTML.Raw("<strong>childSensorId</strong>"), " - The unique child id for the different sensors connected to this Arduino. 0-254.", HTML.Raw("<br>"), "\n		", HTML.Raw("<strong>variableType</strong>"), " -  The ", HTML.Raw('<a href="/download/serial_api_15#variable-types">variableType</a>'), " to fetch.", HTML.Raw("<br>"), "\n		", HTML.Raw("<strong>destination </strong>"), " - The nodeId of other node to request data from in radio network. Default is gateway.", HTML.Raw("<br>"), "\n		", HTML.Raw("<br>"), "\n		", HTML.Raw("<h3>Fetching time from controller</h3>"), "\n		", HTML.Raw("<p>Requests time from controller. Answer will be delivered to the specified callback.</p>"), "\n		", HTML.Raw('<pre><code class="cpp">void requestTime(void (* timeCallback)(unsigned long));</code></pre>'), "\n		 ", HTML.Raw("<strong>callback</strong>"), " - Callback for time request. Incoming argument is seconds since 1970.", HTML.Raw("<br>"), "\n\n\n		", HTML.Raw("<h3>Controller configuration</h3>"), "\n		", HTML.Raw('<p>Your sensor is responsible for reporting data in the correct units of measure. The controller can give you a "hint" for which units of measure to report. The following returns the most recent node configuration received from controller.</p>'), "\n		", HTML.Raw('<pre><code class="cpp">ControllerConfig getConfig();</code></pre>'), "\n		", HTML.Raw("<p>ControlleConfig only contains the filed <strong>isMetric</strong> today which has the following meaning:</p>"), "\n		", HTML.Raw("<strong>true (=metric)</strong>"), " Report sensor data in Celsius, meter, cm, gram, km/h, m/s etc..", HTML.Raw("<br>"), "\n		", HTML.Raw("<strong>false (=imperial)</strong>"), " - Fahrenheit, feet, gallon, mph etc...", HTML.Raw("<br>"), "\n\n\n		", HTML.Raw("<h3>Processing incoming radio messages</h3>"), "\n		", HTML.Raw("<p>Nodes that expects incoming messages, such as an actuator or repeating nodes, must check for new messages frequently.  For repeater nodes this is crucial (otherwise messages will be lost on their way to gateway). All the magic happens in <strong>process()</strong> and this should be placed in your <strong>loop()</strong> section. Do not sleep!</p>"), "\n		", HTML.Raw('<pre><code class="cpp">boolean process();</code></pre>'), "\n\n\n		", HTML.Raw("<h3>Saving states in node</h3>"), "\n		", HTML.Raw('<p>You can save a state (in local EEPROM) which is good for actuators to "remember" state between power cycles. You have 256 bytes to play with. Note that there is a limitation on the number of writes the EEPROM can handle (~100 000 cycles).</p>'), "\n		", HTML.Raw('<pre><code class="cpp">void saveState(uint8_t pos, uint8_t value);</code></pre>'), "\n		", HTML.Raw("<strong>pos</strong>"), " - The position to store value in (0-255)", HTML.Raw("<br>"), "\n		 ", HTML.Raw("<strong>value</strong>"), " - Value to store in position", HTML.Raw("<br>"), "\n		 ", HTML.Raw("<br>"), "\n		", HTML.Raw("<p>Retrieving a state (from local EEPROM).</p>"), "\n		", HTML.Raw('<pre><code class="cpp">uint8_t loadState(uint8_t pos);</code></pre>'), "\n		", HTML.Raw("<strong>pos</strong>"), " - The position to fetch from EEPROM (0-255)", HTML.Raw("<br>"), "\n\n		", HTML.Raw("<h3>Waiting</h3>"), "\n		", HTML.Raw("<p>Waiting using the Arduino delay() command is not a good idea. It halts all MySensors processing and should be avoided. \n		Instead you should use the provided wait function which calls process() while waiting. Note that it doesn't power down the Arduino or radio while waiting. Use sleep if you want to save battery.</p>"), " \n		", HTML.Raw('<pre><code class="cpp">void wait(unsigned long ms);</code></pre>'), "\n		", HTML.Raw("<strong>ms</strong>"), " - The number of milliseconds to wait (while still processing incoming data)", HTML.Raw("<br>"), "\n\n		", HTML.Raw("<h3>Sleeping</h3>"), "\n		", HTML.Raw("<p>To save battery it is crucial to sleep you node as much as possible. The node can wake up from external interrupts or by a timer.</p>"), "\n		", HTML.Raw("<p>The following sleep your radio and Arduino (in PowerDownMode). Wakes up on timer interrupt.</p>"), "\n		 ", HTML.Raw('<pre><code class="cpp">void sleep(unsigned long ms);</code></pre>'), "\n		", HTML.Raw("<strong>ms</strong>"), " - Number of milliseconds to sleep.", HTML.Raw("<br>"), "\n		", HTML.Raw("<br>"), "\n		", HTML.Raw("<p>The following sleeps your radio and Arduino (in PowerDownMode). Wakes up on timer interrupt or from an external interrupt. </p>"), "\n		 ", HTML.Raw('<p>See: <a href="http://arduino.cc/en/Reference/attachInterrupt">http://arduino.cc/en/Reference/attachInterrupt</a> for details on modes and which pin is assigned to what interrupt. On Nano/Pro Mini: 0=Pin2, 1=Pin3</p>'), "\n\n		", HTML.Raw('<pre><code class="cpp">bool sleep(int interrupt, int mode, unsigned long ms=0);</code></pre>'), "\n 	       ", HTML.Raw("<strong>interrupt</strong>"), " - Interrupt that should trigger the wakeup.", HTML.Raw("<br>"), "\n		", HTML.Raw("<strong>mode</strong>"), " -  RISING, FALLING, CHANGE", HTML.Raw("<br>"), "\n		 ", HTML.Raw("<strong>ms</strong>"), " - Number of milliseconds to sleep (or 0 to sleep forever).", HTML.Raw("<br>"), "\n		 ", HTML.Raw("<p>The sleep method returns true if wake up was triggered by pin change and false means timer woke it up.</p>"), "\n\n		", HTML.Raw('<pre><code class="cpp">int8_t sleep(uint8_t interrupt1, uint8_t mode1, uint8_t interrupt2, uint8_t mode2, unsigned long ms=0);</code></pre>'), "\n 	       ", HTML.Raw("<strong>interrupt1</strong>"), " - First interrupt that should trigger the wakeup.", HTML.Raw("<br>"), "\n		", HTML.Raw("<strong>mode1</strong>"), " -  Mode for first interrupt (RISING, FALLING, CHANGE)", HTML.Raw("<br>"), "\n 	       ", HTML.Raw("<strong>interrupt2</strong>"), " - Second interrupt that should trigger the wakeup.", HTML.Raw("<br>"), "\n		", HTML.Raw("<strong>mode2</strong>"), " -  Mode for second interrupt (RISING, FALLING, CHANGE)", HTML.Raw("<br>"), "\n		 ", HTML.Raw("<strong>ms</strong>"), " - Number of milliseconds to sleep (or 0 to sleep forever).", HTML.Raw("<br>"), "\n		 ", HTML.Raw("<p>Returns the interrupt number if wake up was triggered by pin change and negative if timer woke it up.</p>"), "\n\n\n\n		", HTML.Raw('<h3 id="MyMessage">Message constructor</h3>'), "\n\n		", HTML.Raw("<p>Create an instance of MyMessage. This class holds the message data and have some helpers for setting payload.</p>"), "\n		", HTML.Raw('<pre><code class="cpp">MyMessage(uint8_t childSensorId, uint8_t variableType);</code></pre>'), "\n		", HTML.Raw("<strong>childSensorId</strong>"), " - The child sensor id to report data on. 0-254.", HTML.Raw("<br>"), "\n		", HTML.Raw("<strong>variableType</strong>"), " - ", HTML.Raw('<a href="/download/serial_api_15#variable-types">Variable type</a>'), ".", HTML.Raw("<br>"), "\n\n		", HTML.Raw('<h3 id="MyMessage">Message manipulation</h3>'), "\n\n		", HTML.Raw("<p>You can manipulate your outgoing and incoming messages with the following getter/setters. </p>"), "\n		", HTML.Raw('<pre><code class="cpp">// Setters for building message "on the fly"\nMyMessage&amp; setType(uint8_t type);\nMyMessage&amp; setSensor(uint8_t sensor);\nMyMessage&amp; setDestination(uint8_t destination);\n\n// Setters for payload\nMyMessage&amp; set(void* payload, uint8_t length);\nMyMessage&amp; set(const char* value);\nMyMessage&amp; set(uint8_t value);\nMyMessage&amp; set(float value, uint8_t decimals);\nMyMessage&amp; set(unsigned long value);\nMyMessage&amp; set(long value);\nMyMessage&amp; set(unsigned int value);\nMyMessage&amp; set(int value);\n\n// Getter for ack-flag. Returns true if this is an ack message.\nbool isAck() const;\n\n// Getters for picking up payload on incoming messages\nchar* getStream(char *buffer) const;\nchar* getString(char *buffer) const;\nconst char* getString() const;\nvoid* getCustom() const;\nuint8_t getByte() const;\nbool getBool() const;\nfloat getFloat() const;\nlong getLong() const;\nunsigned long getULong() const;\nint getInt() const;\nunsigned int getUInt() const;\n</code></pre>'), "\n\n\n		", HTML.Raw("<h2>Buying guide</h2>"), "\n		", Blaze._TemplateWith(function() {
    return {
      category: Spacebars.call("s_books")
    };
  }, function() {
    return Spacebars.include(view.lookupTemplate("shop"));
  }), "\n		"), "\n	");
}));

}).call(this);
